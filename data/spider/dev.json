[
 {
  "db_id":"tvshow",
  "query":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
  "query_toks":[
   "SELECT",
   "Episode",
   ",",
   "Rating",
   "FROM",
   "TV_series",
   "ORDER",
   "BY",
   "Rating",
   "DESC",
   "LIMIT",
   "3",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "episode",
   ",",
   "rating",
   "from",
   "tv_series",
   "order",
   "by",
   "rating",
   "desc",
   "limit",
   "value"
  ],
  "question":"What are 3 most highly rated episodes in the TV series table and what were those ratings?",
  "question_toks":[
   "What",
   "are",
   "3",
   "most",
   "highly",
   "rated",
   "episodes",
   "in",
   "the",
   "TV",
   "series",
   "table",
   "and",
   "what",
   "were",
   "those",
   "ratings",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ]
    ]
   ],
   "limit":3,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT grade FROM Highschooler",
  "query_toks":[
   "SELECT",
   "grade",
   "FROM",
   "Highschooler"
  ],
  "query_toks_no_value":[
   "select",
   "grade",
   "from",
   "highschooler"
  ],
  "question":"What is the grade of each high schooler?",
  "question_toks":[
   "What",
   "is",
   "the",
   "grade",
   "of",
   "each",
   "high",
   "schooler",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"employee_hire_evaluation",
  "query":"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
  "query_toks":[
   "SELECT",
   "city",
   "FROM",
   "employee",
   "WHERE",
   "age",
   "<",
   "30",
   "GROUP",
   "BY",
   "city",
   "HAVING",
   "count",
   "(",
   "*",
   ")",
   ">",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "city",
   "from",
   "employee",
   "where",
   "age",
   "<",
   "value",
   "group",
   "by",
   "city",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "value"
  ],
  "question":"Find the cities that have more than one employee under age 30.",
  "question_toks":[
   "Find",
   "the",
   "cities",
   "that",
   "have",
   "more",
   "than",
   "one",
   "employee",
   "under",
   "age",
   "30",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     4,
     [
      0,
      [
       0,
       3,
       false
      ],
      null
     ],
     30.0,
     null
    ]
   ],
   "groupBy":[
    [
     0,
     4,
     false
    ]
   ],
   "having":[
    [
     false,
     3,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     1.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"employee_hire_evaluation",
  "query":"SELECT name FROM employee ORDER BY age",
  "query_toks":[
   "SELECT",
   "name",
   "FROM",
   "employee",
   "ORDER",
   "BY",
   "age"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "employee",
   "order",
   "by",
   "age"
  ],
  "question":"Sort employee names by their age in ascending order.",
  "question_toks":[
   "Sort",
   "employee",
   "names",
   "by",
   "their",
   "age",
   "in",
   "ascending",
   "order",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       3,
       false
      ],
      null
     ]
    ]
   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
  "query_toks":[
   "SELECT",
   "T1.FullName",
   ",",
   "T1.Id",
   "FROM",
   "CAR_MAKERS",
   "AS",
   "T1",
   "JOIN",
   "MODEL_LIST",
   "AS",
   "T2",
   "ON",
   "T1.Id",
   "=",
   "T2.Maker",
   "GROUP",
   "BY",
   "T1.Id",
   "HAVING",
   "count",
   "(",
   "*",
   ")",
   ">",
   "3",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "fullname",
   ",",
   "t1",
   ".",
   "id",
   "from",
   "car_makers",
   "as",
   "t1",
   "join",
   "model_list",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "id",
   "=",
   "t2",
   ".",
   "maker",
   "group",
   "by",
   "t1",
   ".",
   "id",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "value"
  ],
  "question":"Which makers designed more than 3 car models? List full name and the id.",
  "question_toks":[
   "Which",
   "makers",
   "designed",
   "more",
   "than",
   "3",
   "car",
   "models",
   "?",
   "List",
   "full",
   "name",
   "and",
   "the",
   "id",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ],
      [
       0,
       11,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     6,
     false
    ]
   ],
   "having":[
    [
     false,
     3,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     3.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"dog_kennels",
  "query":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
  "query_toks":[
   "SELECT",
   "email_address",
   "FROM",
   "Professionals",
   "WHERE",
   "state",
   "=",
   "'Hawaii",
   "'",
   "OR",
   "state",
   "=",
   "'Wisconsin",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "email_address",
   "from",
   "professionals",
   "where",
   "state",
   "=",
   "value",
   "or",
   "state",
   "=",
   "value"
  ],
  "question":"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
  "question_toks":[
   "What",
   "are",
   "the",
   "emails",
   "of",
   "the",
   "professionals",
   "living",
   "in",
   "either",
   "the",
   "state",
   "of",
   "Hawaii",
   "or",
   "the",
   "state",
   "of",
   "Wisconsin",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      6
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        41,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       38,
       false
      ],
      null
     ],
     "\"Hawaii\"",
     null
    ],
    "or",
    [
     false,
     2,
     [
      0,
      [
       0,
       38,
       false
      ],
      null
     ],
     "\"Wisconsin\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
  "query_toks":[
   "SELECT",
   "T1.paragraph_id",
   ",",
   "T1.paragraph_text",
   "FROM",
   "Paragraphs",
   "AS",
   "T1",
   "JOIN",
   "Documents",
   "AS",
   "T2",
   "ON",
   "T1.document_id",
   "=",
   "T2.document_id",
   "WHERE",
   "T2.Document_Name",
   "=",
   "'Welcome",
   "to",
   "NY",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "paragraph_id",
   ",",
   "t1",
   ".",
   "paragraph_text",
   "from",
   "paragraphs",
   "as",
   "t1",
   "join",
   "documents",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "document_id",
   "=",
   "t2",
   ".",
   "document_id",
   "where",
   "t2",
   ".",
   "document_name",
   "=",
   "value"
  ],
  "question":"Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
  "question_toks":[
   "Show",
   "all",
   "paragraph",
   "ids",
   "and",
   "texts",
   "for",
   "the",
   "document",
   "with",
   "name",
   "'Welcome",
   "to",
   "NY",
   "'",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        15,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        14,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        16,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       11,
       false
      ],
      null
     ],
     "\"Welcome to NY\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
  "query_toks":[
   "SELECT",
   "avg",
   "(",
   "grade",
   ")",
   "FROM",
   "Highschooler",
   "WHERE",
   "id",
   "IN",
   "(",
   "SELECT",
   "T1.student_id",
   "FROM",
   "Friend",
   "AS",
   "T1",
   "JOIN",
   "Highschooler",
   "AS",
   "T2",
   "ON",
   "T1.student_id",
   "=",
   "T2.id",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "avg",
   "(",
   "grade",
   ")",
   "from",
   "highschooler",
   "where",
   "id",
   "in",
   "(",
   "select",
   "t1",
   ".",
   "student_id",
   "from",
   "friend",
   "as",
   "t1",
   "join",
   "highschooler",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "student_id",
   "=",
   "t2",
   ".",
   "id",
   ")"
  ],
  "question":"What is the average grade of students who have friends?",
  "question_toks":[
   "What",
   "is",
   "the",
   "average",
   "grade",
   "of",
   "students",
   "who",
   "have",
   "friends",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      5,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     8,
     [
      0,
      [
       0,
       1,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         1
        ],
        [
         "table_unit",
         0
        ]
       ],
       "conds":[
        [
         false,
         2,
         [
          0,
          [
           0,
           4,
           false
          ],
          null
         ],
         [
          0,
          1,
          false
         ],
         null
        ]
       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           4,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
  "query_toks":[
   "SELECT",
   "Airline",
   ",",
   "Abbreviation",
   "FROM",
   "AIRLINES",
   "WHERE",
   "Country",
   "=",
   "``",
   "USA",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "airline",
   ",",
   "abbreviation",
   "from",
   "airlines",
   "where",
   "country",
   "=",
   "value"
  ],
  "question":"List all airline names and their abbreviations in \"USA\".",
  "question_toks":[
   "List",
   "all",
   "airline",
   "names",
   "and",
   "their",
   "abbreviations",
   "in",
   "``",
   "USA",
   "''",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       4,
       false
      ],
      null
     ],
     "\"USA\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
  "query_toks":[
   "SELECT",
   "student_id",
   "FROM",
   "Friend",
   "INTERSECT",
   "SELECT",
   "liked_id",
   "FROM",
   "Likes"
  ],
  "query_toks_no_value":[
   "select",
   "student_id",
   "from",
   "friend",
   "intersect",
   "select",
   "liked_id",
   "from",
   "likes"
  ],
  "question":"Show the ids of high schoolers who have friends and are also liked by someone else.",
  "question_toks":[
   "Show",
   "the",
   "ids",
   "of",
   "high",
   "schoolers",
   "who",
   "have",
   "friends",
   "and",
   "are",
   "also",
   "liked",
   "by",
   "someone",
   "else",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":{
    "from":{
     "table_units":[
      [
       "table_unit",
       2
      ]
     ],
     "conds":[

     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         7,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[

    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   },
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"poker_player",
  "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
  "query_toks":[
   "SELECT",
   "T1.Name",
   "FROM",
   "people",
   "AS",
   "T1",
   "JOIN",
   "poker_player",
   "AS",
   "T2",
   "ON",
   "T1.People_ID",
   "=",
   "T2.People_ID"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "name",
   "from",
   "people",
   "as",
   "t1",
   "join",
   "poker_player",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "people_id",
   "=",
   "t2",
   ".",
   "people_id"
  ],
  "question":"What are the names of poker players?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "poker",
   "players",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      0
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ],
      [
       0,
       2,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
  "query_toks":[
   "SELECT",
   "avg",
   "(",
   "LifeExpectancy",
   ")",
   "FROM",
   "country",
   "WHERE",
   "Name",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "T1.Name",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "WHERE",
   "T2.Language",
   "=",
   "``",
   "English",
   "''",
   "AND",
   "T2.IsOfficial",
   "=",
   "``",
   "T",
   "''",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "avg",
   "(",
   "lifeexpectancy",
   ")",
   "from",
   "country",
   "where",
   "name",
   "not",
   "in",
   "(",
   "select",
   "t1",
   ".",
   "name",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "where",
   "t2",
   ".",
   "language",
   "=",
   "value",
   "and",
   "t2",
   ".",
   "isofficial",
   "=",
   "value",
   ")"
  ],
  "question":"Give the mean life expectancy of countries in which English is not the official language.",
  "question_toks":[
   "Give",
   "the",
   "mean",
   "life",
   "expectancy",
   "of",
   "countries",
   "in",
   "which",
   "English",
   "is",
   "not",
   "the",
   "official",
   "language",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      5,
      [
       0,
       [
        0,
        15,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       9,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         2
        ],
        [
         "table_unit",
         3
        ]
       ],
       "conds":[
        [
         false,
         2,
         [
          0,
          [
           0,
           8,
           false
          ],
          null
         ],
         [
          0,
          23,
          false
         ],
         null
        ]
       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           9,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[
       [
        false,
        2,
        [
         0,
         [
          0,
          24,
          false
         ],
         null
        ],
        "\"English\"",
        null
       ],
       "and",
       [
        false,
        2,
        [
         0,
         [
          0,
          25,
          false
         ],
         null
        ],
        "\"T\"",
        null
       ]
      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"voter_1",
  "query":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
  "query_toks":[
   "SELECT",
   "T1.contestant_number",
   ",",
   "T1.contestant_name",
   "FROM",
   "contestants",
   "AS",
   "T1",
   "JOIN",
   "votes",
   "AS",
   "T2",
   "ON",
   "T1.contestant_number",
   "=",
   "T2.contestant_number",
   "GROUP",
   "BY",
   "T1.contestant_number",
   "HAVING",
   "count",
   "(",
   "*",
   ")",
   ">",
   "=",
   "2"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "contestant_number",
   ",",
   "t1",
   ".",
   "contestant_name",
   "from",
   "contestants",
   "as",
   "t1",
   "join",
   "votes",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "contestant_number",
   "=",
   "t2",
   ".",
   "contestant_number",
   "group",
   "by",
   "t1",
   ".",
   "contestant_number",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "=",
   "value"
  ],
  "question":"What are the contestant numbers and names of the contestants who had at least two votes?",
  "question_toks":[
   "What",
   "are",
   "the",
   "contestant",
   "numbers",
   "and",
   "names",
   "of",
   "the",
   "contestants",
   "who",
   "had",
   "at",
   "least",
   "two",
   "votes",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ],
      [
       0,
       8,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     3,
     false
    ]
   ],
   "having":[
    [
     false,
     5,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     2.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
  "query_toks":[
   "SELECT",
   "DISTINCT",
   "T1.Maker",
   "FROM",
   "CAR_MAKERS",
   "AS",
   "T1",
   "JOIN",
   "MODEL_LIST",
   "AS",
   "T2",
   "ON",
   "T1.Id",
   "=",
   "T2.Maker",
   "JOIN",
   "CAR_NAMES",
   "AS",
   "T3",
   "ON",
   "T2.model",
   "=",
   "T3.model",
   "JOIN",
   "CARS_DATA",
   "AS",
   "T4",
   "ON",
   "T3.MakeId",
   "=",
   "T4.id",
   "WHERE",
   "T4.year",
   "=",
   "'1970",
   "'",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "t1",
   ".",
   "maker",
   "from",
   "car_makers",
   "as",
   "t1",
   "join",
   "model_list",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "id",
   "=",
   "t2",
   ".",
   "maker",
   "join",
   "car_names",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "model",
   "=",
   "t3",
   ".",
   "model",
   "join",
   "cars_data",
   "as",
   "t4",
   "on",
   "t3",
   ".",
   "makeid",
   "=",
   "t4",
   ".",
   "id",
   "where",
   "t4",
   ".",
   "year",
   "=",
   "value"
  ],
  "question":"What is the name of the different car makers who produced a car in 1970?",
  "question_toks":[
   "What",
   "is",
   "the",
   "name",
   "of",
   "the",
   "different",
   "car",
   "makers",
   "who",
   "produced",
   "a",
   "car",
   "in",
   "1970",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ],
      [
       0,
       11,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ],
      [
       0,
       14,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       16,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       23,
       false
      ],
      null
     ],
     "\"1970\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"poker_player",
  "query":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "Nationality",
   "FROM",
   "people",
   "GROUP",
   "BY",
   "Nationality",
   "ORDER",
   "BY",
   "COUNT",
   "(",
   "*",
   ")",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "nationality",
   "from",
   "people",
   "group",
   "by",
   "nationality",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "desc",
   "limit",
   "value"
  ],
  "question":"What is the most common nationality of people?",
  "question_toks":[
   "What",
   "is",
   "the",
   "most",
   "common",
   "nationality",
   "of",
   "people",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     8,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
  "query_toks":[
   "SELECT",
   "avg",
   "(",
   "T2.edispl",
   ")",
   "FROM",
   "CAR_NAMES",
   "AS",
   "T1",
   "JOIN",
   "CARS_DATA",
   "AS",
   "T2",
   "ON",
   "T1.MakeId",
   "=",
   "T2.Id",
   "WHERE",
   "T1.Model",
   "=",
   "'volvo",
   "'",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "avg",
   "(",
   "t2",
   ".",
   "edispl",
   ")",
   "from",
   "car_names",
   "as",
   "t1",
   "join",
   "cars_data",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "makeid",
   "=",
   "t2",
   ".",
   "id",
   "where",
   "t1",
   ".",
   "model",
   "=",
   "value"
  ],
  "question":"What is the average edispl of the cars of model volvo?",
  "question_toks":[
   "What",
   "is",
   "the",
   "average",
   "edispl",
   "of",
   "the",
   "cars",
   "of",
   "model",
   "volvo",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       16,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      5,
      [
       0,
       [
        0,
        19,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       14,
       false
      ],
      null
     ],
     "\"volvo\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"wta_1",
  "query":"SELECT count(DISTINCT country_code) FROM players",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "DISTINCT",
   "country_code",
   ")",
   "FROM",
   "players"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "distinct",
   "country_code",
   ")",
   "from",
   "players"
  ],
  "question":"find the number of distinct country codes of all players.",
  "question_toks":[
   "find",
   "the",
   "number",
   "of",
   "distinct",
   "country",
   "codes",
   "of",
   "all",
   "players",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        6,
        true
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
  "query_toks":[
   "SELECT",
   "avg",
   "(",
   "Weight",
   ")",
   ",",
   "YEAR",
   "FROM",
   "CARS_DATA",
   "GROUP",
   "BY",
   "YEAR",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "avg",
   "(",
   "weight",
   ")",
   ",",
   "year",
   "from",
   "cars_data",
   "group",
   "by",
   "year"
  ],
  "question":"What is the average weight and year for each year?",
  "question_toks":[
   "What",
   "is",
   "the",
   "average",
   "weight",
   "and",
   "year",
   "for",
   "each",
   "year",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      5
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      5,
      [
       0,
       [
        0,
        21,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        23,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     23,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
  "query_toks":[
   "SELECT",
   "template_type_code",
   "FROM",
   "Ref_template_types",
   "WHERE",
   "template_type_description",
   "=",
   "``",
   "Book",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "template_type_code",
   "from",
   "ref_template_types",
   "where",
   "template_type_description",
   "=",
   "value"
  ],
  "question":"What is the template type code for template type description \"Book\".",
  "question_toks":[
   "What",
   "is",
   "the",
   "template",
   "type",
   "code",
   "for",
   "template",
   "type",
   "description",
   "``",
   "Book",
   "''",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Book\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
  "query_toks":[
   "SELECT",
   "Content",
   "FROM",
   "TV_Channel",
   "WHERE",
   "series_name",
   "=",
   "``",
   "Sky",
   "Radio",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "content",
   "from",
   "tv_channel",
   "where",
   "series_name",
   "=",
   "value"
  ],
  "question":"What is the content of TV Channel with serial name \"Sky Radio\"?",
  "question_toks":[
   "What",
   "is",
   "the",
   "content",
   "of",
   "TV",
   "Channel",
   "with",
   "serial",
   "name",
   "``",
   "Sky",
   "Radio",
   "''",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Sky Radio\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT count(*) FROM Documents",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Documents"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "documents"
  ],
  "question":"How many documents do we have?",
  "question_toks":[
   "How",
   "many",
   "documents",
   "do",
   "we",
   "have",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"student_transcripts_tracking",
  "query":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "DISTINCT",
   "degree_summary_name",
   ")",
   "FROM",
   "Degree_Programs"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "distinct",
   "degree_summary_name",
   ")",
   "from",
   "degree_programs"
  ],
  "question":"How many different degrees are offered?",
  "question_toks":[
   "How",
   "many",
   "different",
   "degrees",
   "are",
   "offered",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        20,
        true
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "DISTINCT",
   "T2.Language",
   ")",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "WHERE",
   "IndepYear",
   "<",
   "1930",
   "AND",
   "T2.IsOfficial",
   "=",
   "``",
   "T",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "distinct",
   "t2",
   ".",
   "language",
   ")",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "where",
   "indepyear",
   "<",
   "value",
   "and",
   "t2",
   ".",
   "isofficial",
   "=",
   "value"
  ],
  "question":"For the countries founded before 1930, what is the total number of distinct official languages?",
  "question_toks":[
   "For",
   "the",
   "countries",
   "founded",
   "before",
   "1930",
   ",",
   "what",
   "is",
   "the",
   "total",
   "number",
   "of",
   "distinct",
   "official",
   "languages",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        24,
        true
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     4,
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ],
     1930.0,
     null
    ],
    "and",
    [
     false,
     2,
     [
      0,
      [
       0,
       25,
       false
      ],
      null
     ],
     "\"T\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "AIRLINES",
   "AS",
   "T1",
   "JOIN",
   "FLIGHTS",
   "AS",
   "T2",
   "ON",
   "T2.Airline",
   "=",
   "T1.uid",
   "WHERE",
   "T1.Airline",
   "=",
   "``",
   "United",
   "Airlines",
   "''",
   "AND",
   "T2.SourceAirport",
   "=",
   "``",
   "AHD",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "airlines",
   "as",
   "t1",
   "join",
   "flights",
   "as",
   "t2",
   "on",
   "t2",
   ".",
   "airline",
   "=",
   "t1",
   ".",
   "uid",
   "where",
   "t1",
   ".",
   "airline",
   "=",
   "value",
   "and",
   "t2",
   ".",
   "sourceairport",
   "=",
   "value"
  ],
  "question":"Return the number of United Airlines flights leaving from AHD Airport.",
  "question_toks":[
   "Return",
   "the",
   "number",
   "of",
   "United",
   "Airlines",
   "flights",
   "leaving",
   "from",
   "AHD",
   "Airport",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ],
      [
       0,
       1,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"United Airlines\"",
     null
    ],
    "and",
    [
     false,
     2,
     [
      0,
      [
       0,
       12,
       false
      ],
      null
     ],
     "\"AHD\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
  "query_toks":[
   "SELECT",
   "Name",
   "FROM",
   "country",
   "WHERE",
   "Continent",
   "=",
   "``",
   "Africa",
   "''",
   "AND",
   "population",
   "<",
   "(",
   "SELECT",
   "max",
   "(",
   "population",
   ")",
   "FROM",
   "country",
   "WHERE",
   "Continent",
   "=",
   "``",
   "Asia",
   "''",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "country",
   "where",
   "continent",
   "=",
   "value",
   "and",
   "population",
   "<",
   "(",
   "select",
   "max",
   "(",
   "population",
   ")",
   "from",
   "country",
   "where",
   "continent",
   "=",
   "value",
   ")"
  ],
  "question":"What are the African countries that have a  population less than any country in Asia?",
  "question_toks":[
   "What",
   "are",
   "the",
   "African",
   "countries",
   "that",
   "have",
   "a",
   "population",
   "less",
   "than",
   "any",
   "country",
   "in",
   "Asia",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       10,
       false
      ],
      null
     ],
     "\"Africa\"",
     null
    ],
    "and",
    [
     false,
     4,
     [
      0,
      [
       0,
       14,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         2
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         1,
         [
          0,
          [
           0,
           14,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[
       [
        false,
        2,
        [
         0,
         [
          0,
          10,
          false
         ],
         null
        ],
        "\"Asia\"",
        null
       ]
      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"pets_1",
  "query":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
  "query_toks":[
   "SELECT",
   "major",
   ",",
   "age",
   "FROM",
   "student",
   "WHERE",
   "stuid",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "T1.stuid",
   "FROM",
   "student",
   "AS",
   "T1",
   "JOIN",
   "has_pet",
   "AS",
   "T2",
   "ON",
   "T1.stuid",
   "=",
   "T2.stuid",
   "JOIN",
   "pets",
   "AS",
   "T3",
   "ON",
   "T3.petid",
   "=",
   "T2.petid",
   "WHERE",
   "T3.pettype",
   "=",
   "'cat",
   "'",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "major",
   ",",
   "age",
   "from",
   "student",
   "where",
   "stuid",
   "not",
   "in",
   "(",
   "select",
   "t1",
   ".",
   "stuid",
   "from",
   "student",
   "as",
   "t1",
   "join",
   "has_pet",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stuid",
   "=",
   "t2",
   ".",
   "stuid",
   "join",
   "pets",
   "as",
   "t3",
   "on",
   "t3",
   ".",
   "petid",
   "=",
   "t2",
   ".",
   "petid",
   "where",
   "t3",
   ".",
   "pettype",
   "=",
   "value",
   ")"
  ],
  "question":"Find the major and age of students who do not have a cat pet.",
  "question_toks":[
   "Find",
   "the",
   "major",
   "and",
   "age",
   "of",
   "students",
   "who",
   "do",
   "not",
   "have",
   "a",
   "cat",
   "pet",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       1,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         0
        ],
        [
         "table_unit",
         1
        ],
        [
         "table_unit",
         2
        ]
       ],
       "conds":[
        [
         false,
         2,
         [
          0,
          [
           0,
           1,
           false
          ],
          null
         ],
         [
          0,
          9,
          false
         ],
         null
        ],
        "and",
        [
         false,
         2,
         [
          0,
          [
           0,
           11,
           false
          ],
          null
         ],
         [
          0,
          10,
          false
         ],
         null
        ]
       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           1,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[
       [
        false,
        2,
        [
         0,
         [
          0,
          12,
          false
         ],
         null
        ],
        "\"cat\"",
        null
       ]
      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"wta_1",
  "query":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
  "query_toks":[
   "SELECT",
   "first_name",
   ",",
   "birth_date",
   "FROM",
   "players",
   "WHERE",
   "country_code",
   "=",
   "'USA",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "first_name",
   ",",
   "birth_date",
   "from",
   "players",
   "where",
   "country_code",
   "=",
   "value"
  ],
  "question":"List the first name and birth date of all players from the country with code USA.",
  "question_toks":[
   "List",
   "the",
   "first",
   "name",
   "and",
   "birth",
   "date",
   "of",
   "all",
   "players",
   "from",
   "the",
   "country",
   "with",
   "code",
   "USA",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       6,
       false
      ],
      null
     ],
     "\"USA\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
  "query_toks":[
   "SELECT",
   "song_name",
   ",",
   "song_release_year",
   "FROM",
   "singer",
   "ORDER",
   "BY",
   "age",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "song_name",
   ",",
   "song_release_year",
   "from",
   "singer",
   "order",
   "by",
   "age",
   "limit",
   "value"
  ],
  "question":"What are the names and release years for all the songs of the youngest singer?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "and",
   "release",
   "years",
   "for",
   "all",
   "the",
   "songs",
   "of",
   "the",
   "youngest",
   "singer",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"poker_player",
  "query":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
  "query_toks":[
   "SELECT",
   "Final_Table_Made",
   ",",
   "Best_Finish",
   "FROM",
   "poker_player"
  ],
  "query_toks_no_value":[
   "select",
   "final_table_made",
   ",",
   "best_finish",
   "from",
   "poker_player"
  ],
  "question":"List the final tables made and the best finishes of poker players.",
  "question_toks":[
   "List",
   "the",
   "final",
   "tables",
   "made",
   "and",
   "the",
   "best",
   "finishes",
   "of",
   "poker",
   "players",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
  "query_toks":[
   "SELECT",
   "FlightNo",
   "FROM",
   "FLIGHTS",
   "WHERE",
   "DestAirport",
   "=",
   "``",
   "APG",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "flightno",
   "from",
   "flights",
   "where",
   "destairport",
   "=",
   "value"
  ],
  "question":"Give the flight numbers of flights landing at APG.",
  "question_toks":[
   "Give",
   "the",
   "flight",
   "numbers",
   "of",
   "flights",
   "landing",
   "at",
   "APG",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ],
     "\"APG\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"employee_hire_evaluation",
  "query":"SELECT sum(bonus) FROM evaluation",
  "query_toks":[
   "SELECT",
   "sum",
   "(",
   "bonus",
   ")",
   "FROM",
   "evaluation"
  ],
  "query_toks_no_value":[
   "select",
   "sum",
   "(",
   "bonus",
   ")",
   "from",
   "evaluation"
  ],
  "question":"Find the total amount of bonus given in all the evaluations.",
  "question_toks":[
   "Find",
   "the",
   "total",
   "amount",
   "of",
   "bonus",
   "given",
   "in",
   "all",
   "the",
   "evaluations",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      4,
      [
       0,
       [
        0,
        17,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
  "query_toks":[
   "select",
   "min",
   "(",
   "weight",
   ")",
   "from",
   "cars_data",
   "where",
   "cylinders",
   "=",
   "8",
   "and",
   "year",
   "=",
   "1974"
  ],
  "query_toks_no_value":[
   "select",
   "min",
   "(",
   "weight",
   ")",
   "from",
   "cars_data",
   "where",
   "cylinders",
   "=",
   "value",
   "and",
   "year",
   "=",
   "value"
  ],
  "question":"What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
  "question_toks":[
   "What",
   "is",
   "the",
   "minimum",
   "weight",
   "of",
   "the",
   "car",
   "with",
   "8",
   "cylinders",
   "produced",
   "in",
   "1974",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      5
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      2,
      [
       0,
       [
        0,
        21,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       18,
       false
      ],
      null
     ],
     8.0,
     null
    ],
    "and",
    [
     false,
     2,
     [
      0,
      [
       0,
       23,
       false
      ],
      null
     ],
     1974.0,
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
  "query_toks":[
   "SELECT",
   "Name",
   "FROM",
   "country",
   "ORDER",
   "BY",
   "Population",
   "DESC",
   "LIMIT",
   "3"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "country",
   "order",
   "by",
   "population",
   "desc",
   "limit",
   "value"
  ],
  "question":"What are names of countries with the top 3 largest population?",
  "question_toks":[
   "What",
   "are",
   "names",
   "of",
   "countries",
   "with",
   "the",
   "top",
   "3",
   "largest",
   "population",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       14,
       false
      ],
      null
     ]
    ]
   ],
   "limit":3,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"wta_1",
  "query":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "winner_name",
   ",",
   "loser_name",
   "FROM",
   "matches",
   "ORDER",
   "BY",
   "minutes",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "winner_name",
   ",",
   "loser_name",
   "from",
   "matches",
   "order",
   "by",
   "minutes",
   "desc",
   "limit",
   "value"
  ],
  "question":"What are the names of the winner and loser who played in the longest match?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "the",
   "winner",
   "and",
   "loser",
   "who",
   "played",
   "in",
   "the",
   "longest",
   "match",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        34,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        15,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       20,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"singer",
  "query":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
  "query_toks":[
   "SELECT",
   "Name",
   "FROM",
   "singer",
   "WHERE",
   "Singer_ID",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "Singer_ID",
   "FROM",
   "song",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "singer",
   "where",
   "singer_id",
   "not",
   "in",
   "(",
   "select",
   "singer_id",
   "from",
   "song",
   ")"
  ],
  "question":"List the name of singers that do not have any song.",
  "question_toks":[
   "List",
   "the",
   "name",
   "of",
   "singers",
   "that",
   "do",
   "not",
   "have",
   "any",
   "song",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       1,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         1
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           8,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT DISTINCT country FROM singer WHERE age  >  20",
  "query_toks":[
   "SELECT",
   "DISTINCT",
   "country",
   "FROM",
   "singer",
   "WHERE",
   "age",
   ">",
   "20"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "country",
   "from",
   "singer",
   "where",
   "age",
   ">",
   "value"
  ],
  "question":"What are  the different countries with singers above age 20?",
  "question_toks":[
   "What",
   "are",
   "the",
   "different",
   "countries",
   "with",
   "singers",
   "above",
   "age",
   "20",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     3,
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ],
     20.0,
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
  "query_toks":[
   "SELECT",
   "CountryName",
   "FROM",
   "countries",
   "EXCEPT",
   "SELECT",
   "T1.CountryName",
   "FROM",
   "countries",
   "AS",
   "T1",
   "JOIN",
   "CAR_MAKERS",
   "AS",
   "T2",
   "ON",
   "T1.countryId",
   "=",
   "T2.Country",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "countryname",
   "from",
   "countries",
   "except",
   "select",
   "t1",
   ".",
   "countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "car_makers",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "countryid",
   "=",
   "t2",
   ".",
   "country"
  ],
  "question":"What are the names of the countries with no car makers?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "the",
   "countries",
   "with",
   "no",
   "car",
   "makers",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":{
    "from":{
     "table_units":[
      [
       "table_unit",
       1
      ],
      [
       "table_unit",
       2
      ]
     ],
     "conds":[
      [
       false,
       2,
       [
        0,
        [
         0,
         3,
         false
        ],
        null
       ],
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         4,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[

    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   }
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T1.Continent",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "GROUP",
   "BY",
   "T1.Continent",
   "ORDER",
   "BY",
   "COUNT",
   "(",
   "*",
   ")",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "continent",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "group",
   "by",
   "t1",
   ".",
   "continent",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "desc",
   "limit",
   "value"
  ],
  "question":"Which continent speaks the most languages?",
  "question_toks":[
   "Which",
   "continent",
   "speaks",
   "the",
   "most",
   "languages",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     10,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
  "query_toks":[
   "SELECT",
   "title",
   ",",
   "Directed_by",
   "FROM",
   "Cartoon",
   "ORDER",
   "BY",
   "Original_air_date"
  ],
  "query_toks_no_value":[
   "select",
   "title",
   ",",
   "directed_by",
   "from",
   "cartoon",
   "order",
   "by",
   "original_air_date"
  ],
  "question":"What is the name and directors of all the cartoons that are ordered by air date?",
  "question_toks":[
   "What",
   "is",
   "the",
   "name",
   "and",
   "directors",
   "of",
   "all",
   "the",
   "cartoons",
   "that",
   "are",
   "ordered",
   "by",
   "air",
   "date",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        20,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        21,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
  "query_toks":[
   "SELECT",
   "T1.Name",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "WHERE",
   "T2.Language",
   "=",
   "``",
   "English",
   "''",
   "INTERSECT",
   "SELECT",
   "T1.Name",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "WHERE",
   "T2.Language",
   "=",
   "``",
   "French",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "name",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "where",
   "t2",
   ".",
   "language",
   "=",
   "value",
   "intersect",
   "select",
   "t1",
   ".",
   "name",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "where",
   "t2",
   ".",
   "language",
   "=",
   "value"
  ],
  "question":"What are the names of nations speak both English and French?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "nations",
   "speak",
   "both",
   "English",
   "and",
   "French",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       24,
       false
      ],
      null
     ],
     "\"English\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":{
    "from":{
     "table_units":[
      [
       "table_unit",
       2
      ],
      [
       "table_unit",
       3
      ]
     ],
     "conds":[
      [
       false,
       2,
       [
        0,
        [
         0,
         8,
         false
        ],
        null
       ],
       [
        0,
        23,
        false
       ],
       null
      ]
     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         9,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[
     [
      false,
      2,
      [
       0,
       [
        0,
        24,
        false
       ],
       null
      ],
      "\"French\"",
      null
     ]
    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   },
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"student_transcripts_tracking",
  "query":"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T2.department_name",
   ",",
   "T1.department_id",
   "FROM",
   "Degree_Programs",
   "AS",
   "T1",
   "JOIN",
   "Departments",
   "AS",
   "T2",
   "ON",
   "T1.department_id",
   "=",
   "T2.department_id",
   "GROUP",
   "BY",
   "T1.department_id",
   "ORDER",
   "BY",
   "count",
   "(",
   "*",
   ")",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "department_name",
   ",",
   "t1",
   ".",
   "department_id",
   "from",
   "degree_programs",
   "as",
   "t1",
   "join",
   "departments",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "department_id",
   "=",
   "t2",
   ".",
   "department_id",
   "group",
   "by",
   "t1",
   ".",
   "department_id",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "desc",
   "limit",
   "value"
  ],
  "question":"Which department offers the most number of degrees? List department name and id.",
  "question_toks":[
   "Which",
   "department",
   "offers",
   "the",
   "most",
   "number",
   "of",
   "degrees",
   "?",
   "List",
   "department",
   "name",
   "and",
   "id",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        19,
        false
       ],
       null
      ],
      [
       0,
       14,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        15,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        19,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     19,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"pets_1",
  "query":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "student",
   "AS",
   "T1",
   "JOIN",
   "has_pet",
   "AS",
   "T2",
   "ON",
   "T1.stuid",
   "=",
   "T2.stuid",
   "JOIN",
   "pets",
   "AS",
   "T3",
   "ON",
   "T2.petid",
   "=",
   "T3.petid",
   "WHERE",
   "T1.sex",
   "=",
   "'F",
   "'",
   "AND",
   "T3.pettype",
   "=",
   "'dog",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "student",
   "as",
   "t1",
   "join",
   "has_pet",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stuid",
   "=",
   "t2",
   ".",
   "stuid",
   "join",
   "pets",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "petid",
   "=",
   "t3",
   ".",
   "petid",
   "where",
   "t1",
   ".",
   "sex",
   "=",
   "value",
   "and",
   "t3",
   ".",
   "pettype",
   "=",
   "value"
  ],
  "question":"Find the number of dog pets that are raised by female students (with sex F).",
  "question_toks":[
   "Find",
   "the",
   "number",
   "of",
   "dog",
   "pets",
   "that",
   "are",
   "raised",
   "by",
   "female",
   "students",
   "(",
   "with",
   "sex",
   "F",
   ")",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ],
      [
       0,
       11,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"F\"",
     null
    ],
    "and",
    [
     false,
     2,
     [
      0,
      [
       0,
       12,
       false
      ],
      null
     ],
     "\"dog\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
  "query_toks":[
   "SELECT",
   "name",
   ",",
   "country",
   ",",
   "age",
   "FROM",
   "singer",
   "ORDER",
   "BY",
   "age",
   "DESC"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   ",",
   "country",
   ",",
   "age",
   "from",
   "singer",
   "order",
   "by",
   "age",
   "desc"
  ],
  "question":"Show name, country, age for all singers ordered by age from the oldest to the youngest.",
  "question_toks":[
   "Show",
   "name",
   ",",
   "country",
   ",",
   "age",
   "for",
   "all",
   "singers",
   "ordered",
   "by",
   "age",
   "from",
   "the",
   "oldest",
   "to",
   "the",
   "youngest",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ]
    ]
   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Flights",
   "AS",
   "T1",
   "JOIN",
   "Airports",
   "AS",
   "T2",
   "ON",
   "T1.DestAirport",
   "=",
   "T2.AirportCode",
   "WHERE",
   "T2.city",
   "=",
   "``",
   "Aberdeen",
   "''",
   "OR",
   "T2.city",
   "=",
   "``",
   "Abilene",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "flights",
   "as",
   "t1",
   "join",
   "airports",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "destairport",
   "=",
   "t2",
   ".",
   "airportcode",
   "where",
   "t2",
   ".",
   "city",
   "=",
   "value",
   "or",
   "t2",
   ".",
   "city",
   "=",
   "value"
  ],
  "question":"How many flights land in Aberdeen or Abilene?",
  "question_toks":[
   "How",
   "many",
   "flights",
   "land",
   "in",
   "Aberdeen",
   "or",
   "Abilene",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      1
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       6,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"Aberdeen\"",
     null
    ],
    "or",
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"Abilene\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
  "query_toks":[
   "SELECT",
   "avg",
   "(",
   "mpg",
   ")",
   "FROM",
   "CARS_DATA",
   "WHERE",
   "Cylinders",
   "=",
   "4",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "avg",
   "(",
   "mpg",
   ")",
   "from",
   "cars_data",
   "where",
   "cylinders",
   "=",
   "value"
  ],
  "question":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
  "question_toks":[
   "What",
   "is",
   "the",
   "average",
   "miles",
   "per",
   "gallon",
   "(",
   "mpg",
   ")",
   "of",
   "the",
   "cars",
   "with",
   "4",
   "cylinders",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      5
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      5,
      [
       0,
       [
        0,
        17,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       18,
       false
      ],
      null
     ],
     4.0,
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
  "query_toks":[
   "SELECT",
   "T2.Language",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "WHERE",
   "T1.GovernmentForm",
   "=",
   "``",
   "Republic",
   "''",
   "GROUP",
   "BY",
   "T2.Language",
   "HAVING",
   "COUNT",
   "(",
   "*",
   ")",
   "=",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "language",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "where",
   "t1",
   ".",
   "governmentform",
   "=",
   "value",
   "group",
   "by",
   "t2",
   ".",
   "language",
   "having",
   "count",
   "(",
   "*",
   ")",
   "=",
   "value"
  ],
  "question":"What languages are only used by a single country with a republic government?",
  "question_toks":[
   "What",
   "languages",
   "are",
   "only",
   "used",
   "by",
   "a",
   "single",
   "country",
   "with",
   "a",
   "republic",
   "government",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        24,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       19,
       false
      ],
      null
     ],
     "\"Republic\"",
     null
    ]
   ],
   "groupBy":[
    [
     0,
     24,
     false
    ]
   ],
   "having":[
    [
     false,
     2,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     1.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
  "query_toks":[
   "SELECT",
   "Name",
   "FROM",
   "country",
   "WHERE",
   "Continent",
   "=",
   "``",
   "Asia",
   "''",
   "ORDER",
   "BY",
   "LifeExpectancy",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "country",
   "where",
   "continent",
   "=",
   "value",
   "order",
   "by",
   "lifeexpectancy",
   "limit",
   "value"
  ],
  "question":"What is the name of country that has the shortest life expectancy in Asia?",
  "question_toks":[
   "What",
   "is",
   "the",
   "name",
   "of",
   "country",
   "that",
   "has",
   "the",
   "shortest",
   "life",
   "expectancy",
   "in",
   "Asia",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       10,
       false
      ],
      null
     ],
     "\"Asia\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       15,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
  "query_toks":[
   "SELECT",
   "document_name",
   ",",
   "template_id",
   "FROM",
   "Documents",
   "WHERE",
   "Document_Description",
   "LIKE",
   "``",
   "%",
   "w",
   "%",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "document_name",
   ",",
   "template_id",
   "from",
   "documents",
   "where",
   "document_description",
   "like",
   "value"
  ],
  "question":"Return the names and template ids for documents that contain the letter w in their description.",
  "question_toks":[
   "Return",
   "the",
   "names",
   "and",
   "template",
   "ids",
   "for",
   "documents",
   "that",
   "contain",
   "the",
   "letter",
   "w",
   "in",
   "their",
   "description",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     9,
     [
      0,
      [
       0,
       12,
       false
      ],
      null
     ],
     "\"%w%\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"pets_1",
  "query":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
  "query_toks":[
   "SELECT",
   "T1.Fname",
   "FROM",
   "student",
   "AS",
   "T1",
   "JOIN",
   "has_pet",
   "AS",
   "T2",
   "ON",
   "T1.stuid",
   "=",
   "T2.stuid",
   "JOIN",
   "pets",
   "AS",
   "T3",
   "ON",
   "T3.petid",
   "=",
   "T2.petid",
   "WHERE",
   "T3.pettype",
   "=",
   "'cat",
   "'",
   "INTERSECT",
   "SELECT",
   "T1.Fname",
   "FROM",
   "student",
   "AS",
   "T1",
   "JOIN",
   "has_pet",
   "AS",
   "T2",
   "ON",
   "T1.stuid",
   "=",
   "T2.stuid",
   "JOIN",
   "pets",
   "AS",
   "T3",
   "ON",
   "T3.petid",
   "=",
   "T2.petid",
   "WHERE",
   "T3.pettype",
   "=",
   "'dog",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "fname",
   "from",
   "student",
   "as",
   "t1",
   "join",
   "has_pet",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stuid",
   "=",
   "t2",
   ".",
   "stuid",
   "join",
   "pets",
   "as",
   "t3",
   "on",
   "t3",
   ".",
   "petid",
   "=",
   "t2",
   ".",
   "petid",
   "where",
   "t3",
   ".",
   "pettype",
   "=",
   "value",
   "intersect",
   "select",
   "t1",
   ".",
   "fname",
   "from",
   "student",
   "as",
   "t1",
   "join",
   "has_pet",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stuid",
   "=",
   "t2",
   ".",
   "stuid",
   "join",
   "pets",
   "as",
   "t3",
   "on",
   "t3",
   ".",
   "petid",
   "=",
   "t2",
   ".",
   "petid",
   "where",
   "t3",
   ".",
   "pettype",
   "=",
   "value"
  ],
  "question":"What are the students' first names who have both cats and dogs as pets?",
  "question_toks":[
   "What",
   "are",
   "the",
   "students",
   "'",
   "first",
   "names",
   "who",
   "have",
   "both",
   "cats",
   "and",
   "dogs",
   "as",
   "pets",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ],
      [
       0,
       10,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       12,
       false
      ],
      null
     ],
     "\"cat\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":{
    "from":{
     "table_units":[
      [
       "table_unit",
       0
      ],
      [
       "table_unit",
       1
      ],
      [
       "table_unit",
       2
      ]
     ],
     "conds":[
      [
       false,
       2,
       [
        0,
        [
         0,
         1,
         false
        ],
        null
       ],
       [
        0,
        9,
        false
       ],
       null
      ],
      "and",
      [
       false,
       2,
       [
        0,
        [
         0,
         11,
         false
        ],
        null
       ],
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         3,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[
     [
      false,
      2,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ],
      "\"dog\"",
      null
     ]
    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   },
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"battle_death",
  "query":"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
  "query_toks":[
   "SELECT",
   "name",
   ",",
   "RESULT",
   "FROM",
   "battle",
   "WHERE",
   "bulgarian_commander",
   "!",
   "=",
   "'Boril",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   ",",
   "result",
   "from",
   "battle",
   "where",
   "bulgarian_commander",
   "!",
   "=",
   "value"
  ],
  "question":"What are the name and results of the battles when the bulgarian commander is not 'Boril'",
  "question_toks":[
   "What",
   "are",
   "the",
   "name",
   "and",
   "results",
   "of",
   "the",
   "battles",
   "when",
   "the",
   "bulgarian",
   "commander",
   "is",
   "not",
   "'Boril",
   "'"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     7,
     [
      0,
      [
       0,
       4,
       false
      ],
      null
     ],
     "\"Boril\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"course_teach",
  "query":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
  "query_toks":[
   "SELECT",
   "Name",
   "FROM",
   "teacher",
   "WHERE",
   "Teacher_id",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "Teacher_id",
   "FROM",
   "course_arrange",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "teacher",
   "where",
   "teacher_id",
   "not",
   "in",
   "(",
   "select",
   "teacher_id",
   "from",
   "course_arrange",
   ")"
  ],
  "question":"List the names of teachers who have not been arranged to teach courses.",
  "question_toks":[
   "List",
   "the",
   "names",
   "of",
   "teachers",
   "who",
   "have",
   "not",
   "been",
   "arranged",
   "to",
   "teach",
   "courses",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       4,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         2
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           9,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
  "query_toks":[
   "SELECT",
   "T1.Model",
   "FROM",
   "CAR_NAMES",
   "AS",
   "T1",
   "JOIN",
   "CARS_DATA",
   "AS",
   "T2",
   "ON",
   "T1.MakeId",
   "=",
   "T2.Id",
   "ORDER",
   "BY",
   "T2.mpg",
   "DESC",
   "LIMIT",
   "1",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "model",
   "from",
   "car_names",
   "as",
   "t1",
   "join",
   "cars_data",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "makeid",
   "=",
   "t2",
   ".",
   "id",
   "order",
   "by",
   "t2",
   ".",
   "mpg",
   "desc",
   "limit",
   "value"
  ],
  "question":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
  "question_toks":[
   "Which",
   "model",
   "saves",
   "the",
   "most",
   "gasoline",
   "?",
   "That",
   "is",
   "to",
   "say",
   ",",
   "have",
   "the",
   "maximum",
   "miles",
   "per",
   "gallon",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       16,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        14,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       17,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
  "query_toks":[
   "SELECT",
   "min",
   "(",
   "grade",
   ")",
   "FROM",
   "Highschooler",
   "WHERE",
   "id",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "T1.student_id",
   "FROM",
   "Friend",
   "AS",
   "T1",
   "JOIN",
   "Highschooler",
   "AS",
   "T2",
   "ON",
   "T1.student_id",
   "=",
   "T2.id",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "min",
   "(",
   "grade",
   ")",
   "from",
   "highschooler",
   "where",
   "id",
   "not",
   "in",
   "(",
   "select",
   "t1",
   ".",
   "student_id",
   "from",
   "friend",
   "as",
   "t1",
   "join",
   "highschooler",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "student_id",
   "=",
   "t2",
   ".",
   "id",
   ")"
  ],
  "question":"What is the lowest grade of students who do not have any friends?",
  "question_toks":[
   "What",
   "is",
   "the",
   "lowest",
   "grade",
   "of",
   "students",
   "who",
   "do",
   "not",
   "have",
   "any",
   "friends",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      2,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       1,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         1
        ],
        [
         "table_unit",
         0
        ]
       ],
       "conds":[
        [
         false,
         2,
         [
          0,
          [
           0,
           4,
           false
          ],
          null
         ],
         [
          0,
          1,
          false
         ],
         null
        ]
       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           4,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"student_transcripts_tracking",
  "query":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
  "query_toks":[
   "SELECT",
   "section_description",
   "FROM",
   "Sections",
   "WHERE",
   "section_name",
   "=",
   "'h",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "section_description",
   "from",
   "sections",
   "where",
   "section_name",
   "=",
   "value"
  ],
  "question":"Describe the section h.",
  "question_toks":[
   "Describe",
   "the",
   "section",
   "h",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      4
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        26,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       25,
       false
      ],
      null
     ],
     "\"h\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
  "query_toks":[
   "SELECT",
   "template_type_code",
   ",",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Templates",
   "GROUP",
   "BY",
   "template_type_code"
  ],
  "query_toks_no_value":[
   "select",
   "template_type_code",
   ",",
   "count",
   "(",
   "*",
   ")",
   "from",
   "templates",
   "group",
   "by",
   "template_type_code"
  ],
  "question":"What are the different template type codes, and how many templates correspond to each?",
  "question_toks":[
   "What",
   "are",
   "the",
   "different",
   "template",
   "type",
   "codes",
   ",",
   "and",
   "how",
   "many",
   "templates",
   "correspond",
   "to",
   "each",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ],
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     5,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"dog_kennels",
  "query":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Professionals",
   "WHERE",
   "professional_id",
   "NOT",
   "IN",
   "(",
   "SELECT",
   "professional_id",
   "FROM",
   "Treatments",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "professionals",
   "where",
   "professional_id",
   "not",
   "in",
   "(",
   "select",
   "professional_id",
   "from",
   "treatments",
   ")"
  ],
  "question":"How many professionals did not operate any treatment on dogs?",
  "question_toks":[
   "How",
   "many",
   "professionals",
   "did",
   "not",
   "operate",
   "any",
   "treatment",
   "on",
   "dogs",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      6
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     true,
     8,
     [
      0,
      [
       0,
       33,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         7
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           46,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"wta_1",
  "query":"SELECT min(loser_rank) FROM matches",
  "query_toks":[
   "SELECT",
   "min",
   "(",
   "loser_rank",
   ")",
   "FROM",
   "matches"
  ],
  "query_toks_no_value":[
   "select",
   "min",
   "(",
   "loser_rank",
   ")",
   "from",
   "matches"
  ],
  "question":"What is the best rank of losers across all matches?",
  "question_toks":[
   "What",
   "is",
   "the",
   "best",
   "rank",
   "of",
   "losers",
   "across",
   "all",
   "matches",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      2,
      [
       0,
       [
        0,
        16,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
  "query_toks":[
   "SELECT",
   "T2.Title",
   "FROM",
   "TV_Channel",
   "AS",
   "T1",
   "JOIN",
   "Cartoon",
   "AS",
   "T2",
   "ON",
   "T1.id",
   "=",
   "T2.Channel",
   "WHERE",
   "T1.series_name",
   "=",
   "``",
   "Sky",
   "Radio",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "title",
   "from",
   "tv_channel",
   "as",
   "t1",
   "join",
   "cartoon",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "id",
   "=",
   "t2",
   ".",
   "channel",
   "where",
   "t1",
   ".",
   "series_name",
   "=",
   "value"
  ],
  "question":"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
  "question_toks":[
   "List",
   "the",
   "title",
   "of",
   "all",
   "Cartoons",
   "showed",
   "on",
   "TV",
   "Channel",
   "with",
   "series",
   "name",
   "``",
   "Sky",
   "Radio",
   "''",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       25,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        20,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Sky Radio\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
  "query_toks":[
   "SELECT",
   "T1.AirportCode",
   "FROM",
   "AIRPORTS",
   "AS",
   "T1",
   "JOIN",
   "FLIGHTS",
   "AS",
   "T2",
   "ON",
   "T1.AirportCode",
   "=",
   "T2.DestAirport",
   "OR",
   "T1.AirportCode",
   "=",
   "T2.SourceAirport",
   "GROUP",
   "BY",
   "T1.AirportCode",
   "ORDER",
   "BY",
   "count",
   "(",
   "*",
   ")",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "airportcode",
   "from",
   "airports",
   "as",
   "t1",
   "join",
   "flights",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "airportcode",
   "=",
   "t2",
   ".",
   "destairport",
   "or",
   "t1",
   ".",
   "airportcode",
   "=",
   "t2",
   ".",
   "sourceairport",
   "group",
   "by",
   "t1",
   ".",
   "airportcode",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "limit",
   "value"
  ],
  "question":"Give the code of the airport with the least flights.",
  "question_toks":[
   "Give",
   "the",
   "code",
   "of",
   "the",
   "airport",
   "with",
   "the",
   "least",
   "flights",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ],
      [
       0,
       13,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     6,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT DISTINCT country FROM singer WHERE age  >  20",
  "query_toks":[
   "SELECT",
   "DISTINCT",
   "country",
   "FROM",
   "singer",
   "WHERE",
   "age",
   ">",
   "20"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "country",
   "from",
   "singer",
   "where",
   "age",
   ">",
   "value"
  ],
  "question":"What are all distinct countries where singers above age 20 are from?",
  "question_toks":[
   "What",
   "are",
   "all",
   "distinct",
   "countries",
   "where",
   "singers",
   "above",
   "age",
   "20",
   "are",
   "from",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     3,
     [
      0,
      [
       0,
       13,
       false
      ],
      null
     ],
     20.0,
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
  "query_toks":[
   "SELECT",
   "DISTINCT",
   "T1.model",
   "FROM",
   "MODEL_LIST",
   "AS",
   "T1",
   "JOIN",
   "CAR_NAMES",
   "AS",
   "T2",
   "ON",
   "T1.Model",
   "=",
   "T2.Model",
   "JOIN",
   "CARS_DATA",
   "AS",
   "T3",
   "ON",
   "T2.MakeId",
   "=",
   "T3.Id",
   "JOIN",
   "CAR_MAKERS",
   "AS",
   "T4",
   "ON",
   "T1.Maker",
   "=",
   "T4.Id",
   "WHERE",
   "T3.weight",
   "<",
   "3500",
   "AND",
   "T4.FullName",
   "!",
   "=",
   "'Ford",
   "Motor",
   "Company",
   "'",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "t1",
   ".",
   "model",
   "from",
   "model_list",
   "as",
   "t1",
   "join",
   "car_names",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "model",
   "=",
   "t2",
   ".",
   "model",
   "join",
   "cars_data",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "makeid",
   "=",
   "t3",
   ".",
   "id",
   "join",
   "car_makers",
   "as",
   "t4",
   "on",
   "t1",
   ".",
   "maker",
   "=",
   "t4",
   ".",
   "id",
   "where",
   "t3",
   ".",
   "weight",
   "<",
   "value",
   "and",
   "t4",
   ".",
   "fullname",
   "!",
   "=",
   "value"
  ],
  "question":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
  "question_toks":[
   "Which",
   "models",
   "are",
   "lighter",
   "than",
   "3500",
   "but",
   "not",
   "built",
   "by",
   "the",
   "'Ford",
   "Motor",
   "Company",
   "'",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ],
      [
       0,
       14,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       16,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ],
      [
       0,
       6,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     4,
     [
      0,
      [
       0,
       21,
       false
      ],
      null
     ],
     3500.0,
     null
    ],
    "and",
    [
     false,
     7,
     [
      0,
      [
       0,
       8,
       false
      ],
      null
     ],
     "\"Ford Motor Company\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"orchestra",
  "query":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
  "query_toks":[
   "SELECT",
   "Record_Company",
   ",",
   "COUNT",
   "(",
   "*",
   ")",
   "FROM",
   "orchestra",
   "GROUP",
   "BY",
   "Record_Company"
  ],
  "query_toks_no_value":[
   "select",
   "record_company",
   ",",
   "count",
   "(",
   "*",
   ")",
   "from",
   "orchestra",
   "group",
   "by",
   "record_company"
  ],
  "question":"Please show the different record companies and the corresponding number of orchestras.",
  "question_toks":[
   "Please",
   "show",
   "the",
   "different",
   "record",
   "companies",
   "and",
   "the",
   "corresponding",
   "number",
   "of",
   "orchestras",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ],
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     9,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT count(*) FROM Templates",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Templates"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "templates"
  ],
  "question":"Count the number of templates.",
  "question_toks":[
   "Count",
   "the",
   "number",
   "of",
   "templates",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
  "query_toks":[
   "SELECT",
   "AirportName",
   "FROM",
   "AIRPORTS",
   "WHERE",
   "AirportCode",
   "=",
   "``",
   "AKO",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "airportname",
   "from",
   "airports",
   "where",
   "airportcode",
   "=",
   "value"
  ],
  "question":"What is the airport name for airport 'AKO'?",
  "question_toks":[
   "What",
   "is",
   "the",
   "airport",
   "name",
   "for",
   "airport",
   "'AKO",
   "'",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       6,
       false
      ],
      null
     ],
     "\"AKO\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"poker_player",
  "query":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T2.Money_Rank",
   "FROM",
   "people",
   "AS",
   "T1",
   "JOIN",
   "poker_player",
   "AS",
   "T2",
   "ON",
   "T1.People_ID",
   "=",
   "T2.People_ID",
   "ORDER",
   "BY",
   "T1.Height",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "money_rank",
   "from",
   "people",
   "as",
   "t1",
   "join",
   "poker_player",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "people_id",
   "=",
   "t2",
   ".",
   "people_id",
   "order",
   "by",
   "t1",
   ".",
   "height",
   "desc",
   "limit",
   "value"
  ],
  "question":"Return the money rank of the poker player with the greatest height.",
  "question_toks":[
   "Return",
   "the",
   "money",
   "rank",
   "of",
   "the",
   "poker",
   "player",
   "with",
   "the",
   "greatest",
   "height",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      0
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ],
      [
       0,
       2,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       11,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"course_teach",
  "query":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
  "query_toks":[
   "SELECT",
   "T3.Name",
   "FROM",
   "course_arrange",
   "AS",
   "T1",
   "JOIN",
   "course",
   "AS",
   "T2",
   "ON",
   "T1.Course_ID",
   "=",
   "T2.Course_ID",
   "JOIN",
   "teacher",
   "AS",
   "T3",
   "ON",
   "T1.Teacher_ID",
   "=",
   "T3.Teacher_ID",
   "WHERE",
   "T2.Course",
   "=",
   "``",
   "Math",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "t3",
   ".",
   "name",
   "from",
   "course_arrange",
   "as",
   "t1",
   "join",
   "course",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "course_id",
   "=",
   "t2",
   ".",
   "course_id",
   "join",
   "teacher",
   "as",
   "t3",
   "on",
   "t1",
   ".",
   "teacher_id",
   "=",
   "t3",
   ".",
   "teacher_id",
   "where",
   "t2",
   ".",
   "course",
   "=",
   "value"
  ],
  "question":"Show the name of the teacher for the math course.",
  "question_toks":[
   "Show",
   "the",
   "name",
   "of",
   "the",
   "teacher",
   "for",
   "the",
   "math",
   "course",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       1,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ],
      [
       0,
       4,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       3,
       false
      ],
      null
     ],
     "\"Math\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Likes",
   "AS",
   "T1",
   "JOIN",
   "Highschooler",
   "AS",
   "T2",
   "ON",
   "T1.student_id",
   "=",
   "T2.id",
   "WHERE",
   "T2.name",
   "=",
   "``",
   "Kyle",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "likes",
   "as",
   "t1",
   "join",
   "highschooler",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "student_id",
   "=",
   "t2",
   ".",
   "id",
   "where",
   "t2",
   ".",
   "name",
   "=",
   "value"
  ],
  "question":"How many likes does Kyle have?",
  "question_toks":[
   "How",
   "many",
   "likes",
   "does",
   "Kyle",
   "have",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      0
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        6,
        false
       ],
       null
      ],
      [
       0,
       1,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Kyle\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"voter_1",
  "query":"SELECT max(created) FROM votes WHERE state  =  'CA'",
  "query_toks":[
   "SELECT",
   "max",
   "(",
   "created",
   ")",
   "FROM",
   "votes",
   "WHERE",
   "state",
   "=",
   "'CA",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "max",
   "(",
   "created",
   ")",
   "from",
   "votes",
   "where",
   "state",
   "=",
   "value"
  ],
  "question":"What is last date created of votes from the state 'CA'?",
  "question_toks":[
   "What",
   "is",
   "last",
   "date",
   "created",
   "of",
   "votes",
   "from",
   "the",
   "state",
   "'CA",
   "'",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      1,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       7,
       false
      ],
      null
     ],
     "\"CA\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
  "query_toks":[
   "SELECT",
   "T1.CountryName",
   "FROM",
   "COUNTRIES",
   "AS",
   "T1",
   "JOIN",
   "CONTINENTS",
   "AS",
   "T2",
   "ON",
   "T1.Continent",
   "=",
   "T2.ContId",
   "JOIN",
   "CAR_MAKERS",
   "AS",
   "T3",
   "ON",
   "T1.CountryId",
   "=",
   "T3.Country",
   "WHERE",
   "T2.Continent",
   "=",
   "'europe",
   "'",
   "GROUP",
   "BY",
   "T1.CountryName",
   "HAVING",
   "count",
   "(",
   "*",
   ")",
   ">",
   "=",
   "3",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "continents",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "continent",
   "=",
   "t2",
   ".",
   "contid",
   "join",
   "car_makers",
   "as",
   "t3",
   "on",
   "t1",
   ".",
   "countryid",
   "=",
   "t3",
   ".",
   "country",
   "where",
   "t2",
   ".",
   "continent",
   "=",
   "value",
   "group",
   "by",
   "t1",
   ".",
   "countryname",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "=",
   "value"
  ],
  "question":"Which countries in europe have at least 3 car manufacturers?",
  "question_toks":[
   "Which",
   "countries",
   "in",
   "europe",
   "have",
   "at",
   "least",
   "3",
   "car",
   "manufacturers",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ],
      [
       0,
       1,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"europe\"",
     null
    ]
   ],
   "groupBy":[
    [
     0,
     4,
     false
    ]
   ],
   "having":[
    [
     false,
     5,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     3.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
  "query_toks":[
   "SELECT",
   "grade",
   "FROM",
   "Highschooler",
   "WHERE",
   "name",
   "=",
   "``",
   "Kyle",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "grade",
   "from",
   "highschooler",
   "where",
   "name",
   "=",
   "value"
  ],
  "question":"What grade is Kyle in?",
  "question_toks":[
   "What",
   "grade",
   "is",
   "Kyle",
   "in",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Kyle\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
  "query_toks":[
   "select",
   "t1.countryid",
   ",",
   "t1.countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "car_makers",
   "as",
   "t2",
   "on",
   "t1.countryid",
   "=",
   "t2.country",
   "group",
   "by",
   "t1.countryid",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "3",
   "union",
   "select",
   "t1.countryid",
   ",",
   "t1.countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "car_makers",
   "as",
   "t2",
   "on",
   "t1.countryid",
   "=",
   "t2.country",
   "join",
   "model_list",
   "as",
   "t3",
   "on",
   "t2.id",
   "=",
   "t3.maker",
   "where",
   "t3.model",
   "=",
   "\"fiat\"",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "countryid",
   ",",
   "t1",
   ".",
   "countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "car_makers",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "countryid",
   "=",
   "t2",
   ".",
   "country",
   "group",
   "by",
   "t1",
   ".",
   "countryid",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "value",
   "union",
   "select",
   "t1",
   ".",
   "countryid",
   ",",
   "t1",
   ".",
   "countryname",
   "from",
   "countries",
   "as",
   "t1",
   "join",
   "car_makers",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "countryid",
   "=",
   "t2",
   ".",
   "country",
   "join",
   "model_list",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "id",
   "=",
   "t3",
   ".",
   "maker",
   "where",
   "t3",
   ".",
   "model",
   "=",
   "value"
  ],
  "question":"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
  "question_toks":[
   "What",
   "are",
   "the",
   "ids",
   "and",
   "names",
   "of",
   "all",
   "countries",
   "that",
   "either",
   "have",
   "more",
   "than",
   "3",
   "car",
   "makers",
   "or",
   "produce",
   "fiat",
   "model",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     3,
     false
    ]
   ],
   "having":[
    [
     false,
     3,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     3.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":{
    "from":{
     "table_units":[
      [
       "table_unit",
       1
      ],
      [
       "table_unit",
       2
      ],
      [
       "table_unit",
       3
      ]
     ],
     "conds":[
      [
       false,
       2,
       [
        0,
        [
         0,
         3,
         false
        ],
        null
       ],
       [
        0,
        9,
        false
       ],
       null
      ],
      "and",
      [
       false,
       2,
       [
        0,
        [
         0,
         6,
         false
        ],
        null
       ],
       [
        0,
        11,
        false
       ],
       null
      ]
     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         3,
         false
        ],
        null
       ]
      ],
      [
       0,
       [
        0,
        [
         0,
         4,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[
     [
      false,
      2,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ],
      "\"fiat\"",
      null
     ]
    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   },
   "except":null
  }
 },
 {
  "db_id":"dog_kennels",
  "query":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "cost_of_treatment",
   "FROM",
   "Treatments",
   "ORDER",
   "BY",
   "date_of_treatment",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "cost_of_treatment",
   "from",
   "treatments",
   "order",
   "by",
   "date_of_treatment",
   "desc",
   "limit",
   "value"
  ],
  "question":"How much does the most recent treatment cost?",
  "question_toks":[
   "How",
   "much",
   "does",
   "the",
   "most",
   "recent",
   "treatment",
   "cost",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      7
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        49,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       0,
       48,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT name ,  grade FROM Highschooler",
  "query_toks":[
   "SELECT",
   "name",
   ",",
   "grade",
   "FROM",
   "Highschooler"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   ",",
   "grade",
   "from",
   "highschooler"
  ],
  "question":"Show the names and grades of each high schooler.",
  "question_toks":[
   "Show",
   "the",
   "names",
   "and",
   "grades",
   "of",
   "each",
   "high",
   "schooler",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"network_1",
  "query":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
  "query_toks":[
   "SELECT",
   "id",
   "FROM",
   "Highschooler",
   "EXCEPT",
   "SELECT",
   "student_id",
   "FROM",
   "Friend"
  ],
  "query_toks_no_value":[
   "select",
   "id",
   "from",
   "highschooler",
   "except",
   "select",
   "student_id",
   "from",
   "friend"
  ],
  "question":"What are the ids of high school students who do not have friends?",
  "question_toks":[
   "What",
   "are",
   "the",
   "ids",
   "of",
   "high",
   "school",
   "students",
   "who",
   "do",
   "not",
   "have",
   "friends",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":{
    "from":{
     "table_units":[
      [
       "table_unit",
       1
      ]
     ],
     "conds":[

     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         4,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[

    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   }
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Cartoon",
   "WHERE",
   "Written_by",
   "=",
   "``",
   "Joseph",
   "Kuhr",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "cartoon",
   "where",
   "written_by",
   "=",
   "value"
  ],
  "question":"How many cartoons were written by \"Joseph Kuhr\"?",
  "question_toks":[
   "How",
   "many",
   "cartoons",
   "were",
   "written",
   "by",
   "``",
   "Joseph",
   "Kuhr",
   "''",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       22,
       false
      ],
      null
     ],
     "\"Joseph Kuhr\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"dog_kennels",
  "query":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T1.treatment_type_description",
   "FROM",
   "Treatment_types",
   "AS",
   "T1",
   "JOIN",
   "Treatments",
   "AS",
   "T2",
   "ON",
   "T1.treatment_type_code",
   "=",
   "T2.treatment_type_code",
   "GROUP",
   "BY",
   "T1.treatment_type_code",
   "ORDER",
   "BY",
   "sum",
   "(",
   "cost_of_treatment",
   ")",
   "ASC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "treatment_type_description",
   "from",
   "treatment_types",
   "as",
   "t1",
   "join",
   "treatments",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "treatment_type_code",
   "=",
   "t2",
   ".",
   "treatment_type_code",
   "group",
   "by",
   "t1",
   ".",
   "treatment_type_code",
   "order",
   "by",
   "sum",
   "(",
   "cost_of_treatment",
   ")",
   "asc",
   "limit",
   "value"
  ],
  "question":"What is the description of the treatment type that costs the least money in total?",
  "question_toks":[
   "What",
   "is",
   "the",
   "description",
   "of",
   "the",
   "treatment",
   "type",
   "that",
   "costs",
   "the",
   "least",
   "money",
   "in",
   "total",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      7
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       47,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     8,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       4,
       49,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
  "query_toks":[
   "SELECT",
   "T1.Continent",
   ",",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "CONTINENTS",
   "AS",
   "T1",
   "JOIN",
   "COUNTRIES",
   "AS",
   "T2",
   "ON",
   "T1.ContId",
   "=",
   "T2.continent",
   "JOIN",
   "car_makers",
   "AS",
   "T3",
   "ON",
   "T2.CountryId",
   "=",
   "T3.Country",
   "GROUP",
   "BY",
   "T1.Continent",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "continent",
   ",",
   "count",
   "(",
   "*",
   ")",
   "from",
   "continents",
   "as",
   "t1",
   "join",
   "countries",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "contid",
   "=",
   "t2",
   ".",
   "continent",
   "join",
   "car_makers",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "countryid",
   "=",
   "t3",
   ".",
   "country",
   "group",
   "by",
   "t1",
   ".",
   "continent"
  ],
  "question":"How many car makers are there in each continents? List the continent name and the count.",
  "question_toks":[
   "How",
   "many",
   "car",
   "makers",
   "are",
   "there",
   "in",
   "each",
   "continents",
   "?",
   "List",
   "the",
   "continent",
   "name",
   "and",
   "the",
   "count",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       5,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     2,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"select distinct year from cars_data where weight between 3000 and 4000;",
  "query_toks":[
   "select",
   "distinct",
   "year",
   "from",
   "cars_data",
   "where",
   "weight",
   "between",
   "3000",
   "and",
   "4000",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "year",
   "from",
   "cars_data",
   "where",
   "weight",
   "between",
   "value",
   "and",
   "value"
  ],
  "question":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
  "question_toks":[
   "What",
   "are",
   "the",
   "different",
   "years",
   "in",
   "which",
   "there",
   "were",
   "cars",
   "produced",
   "that",
   "weighed",
   "less",
   "than",
   "4000",
   "and",
   "also",
   "cars",
   "that",
   "weighted",
   "more",
   "than",
   "3000",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      5
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        23,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     1,
     [
      0,
      [
       0,
       21,
       false
      ],
      null
     ],
     3000.0,
     4000.0
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"dog_kennels",
  "query":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
  "query_toks":[
   "SELECT",
   "T1.last_name",
   "FROM",
   "Owners",
   "AS",
   "T1",
   "JOIN",
   "Dogs",
   "AS",
   "T2",
   "ON",
   "T1.owner_id",
   "=",
   "T2.owner_id",
   "WHERE",
   "T2.age",
   "=",
   "(",
   "SELECT",
   "max",
   "(",
   "age",
   ")",
   "FROM",
   "Dogs",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "last_name",
   "from",
   "owners",
   "as",
   "t1",
   "join",
   "dogs",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "owner_id",
   "=",
   "t2",
   ".",
   "owner_id",
   "where",
   "t2",
   ".",
   "age",
   "=",
   "(",
   "select",
   "max",
   "(",
   "age",
   ")",
   "from",
   "dogs",
   ")"
  ],
  "question":"List the last name of the owner owning the youngest dog.",
  "question_toks":[
   "List",
   "the",
   "last",
   "name",
   "of",
   "the",
   "owner",
   "owning",
   "the",
   "youngest",
   "dog",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ],
      [
       0,
       21,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       26,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         5
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         1,
         [
          0,
          [
           0,
           26,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[

      ],
      "limit":null,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"pets_1",
  "query":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
  "query_toks":[
   "SELECT",
   "T2.petid",
   "FROM",
   "student",
   "AS",
   "T1",
   "JOIN",
   "has_pet",
   "AS",
   "T2",
   "ON",
   "T1.stuid",
   "=",
   "T2.stuid",
   "WHERE",
   "T1.Lname",
   "=",
   "'Smith",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "petid",
   "from",
   "student",
   "as",
   "t1",
   "join",
   "has_pet",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stuid",
   "=",
   "t2",
   ".",
   "stuid",
   "where",
   "t1",
   ".",
   "lname",
   "=",
   "value"
  ],
  "question":"What is the id of the pet owned by the student whose last name is 'Smith'?",
  "question_toks":[
   "What",
   "is",
   "the",
   "id",
   "of",
   "the",
   "pet",
   "owned",
   "by",
   "the",
   "student",
   "whose",
   "last",
   "name",
   "is",
   "'Smith",
   "'",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       9,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Smith\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
  "query_toks":[
   "SELECT",
   "Package_Option",
   "FROM",
   "TV_Channel",
   "WHERE",
   "series_name",
   "=",
   "``",
   "Sky",
   "Radio",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "package_option",
   "from",
   "tv_channel",
   "where",
   "series_name",
   "=",
   "value"
  ],
  "question":"What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
  "question_toks":[
   "What",
   "is",
   "the",
   "Package",
   "Option",
   "of",
   "TV",
   "Channel",
   "with",
   "serial",
   "name",
   "``",
   "Sky",
   "Radio",
   "''",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Sky Radio\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
  "query_toks":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "concert",
   "where",
   "stadium_id",
   "=",
   "(",
   "select",
   "stadium_id",
   "from",
   "stadium",
   "order",
   "by",
   "capacity",
   "desc",
   "limit",
   "1",
   ")"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "concert",
   "where",
   "stadium_id",
   "=",
   "(",
   "select",
   "stadium_id",
   "from",
   "stadium",
   "order",
   "by",
   "capacity",
   "desc",
   "limit",
   "value",
   ")"
  ],
  "question":"What are the number of concerts that occurred in the stadium with the largest capacity ?",
  "question_toks":[
   "What",
   "are",
   "the",
   "number",
   "of",
   "concerts",
   "that",
   "occurred",
   "in",
   "the",
   "stadium",
   "with",
   "the",
   "largest",
   "capacity",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       18,
       false
      ],
      null
     ],
     {
      "from":{
       "table_units":[
        [
         "table_unit",
         0
        ]
       ],
       "conds":[

       ]
      },
      "select":[
       false,
       [
        [
         0,
         [
          0,
          [
           0,
           1,
           false
          ],
          null
         ]
        ]
       ]
      ],
      "where":[

      ],
      "groupBy":[

      ],
      "having":[

      ],
      "orderBy":[
       "desc",
       [
        [
         0,
         [
          0,
          4,
          false
         ],
         null
        ]
       ]
      ],
      "limit":1,
      "intersect":null,
      "union":null,
      "except":null
     },
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT count(*) FROM AIRPORTS",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "AIRPORTS"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "airports"
  ],
  "question":"Return the number of  airports.",
  "question_toks":[
   "Return",
   "the",
   "number",
   "of",
   "airports",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"singer",
  "query":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "Citizenship",
   "FROM",
   "singer",
   "GROUP",
   "BY",
   "Citizenship",
   "ORDER",
   "BY",
   "COUNT",
   "(",
   "*",
   ")",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "citizenship",
   "from",
   "singer",
   "group",
   "by",
   "citizenship",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "desc",
   "limit",
   "value"
  ],
  "question":"Please show the most common citizenship of singers.",
  "question_toks":[
   "Please",
   "show",
   "the",
   "most",
   "common",
   "citizenship",
   "of",
   "singers",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        5,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     5,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"voter_1",
  "query":"select contestant_name from contestants where contestant_name like \"%al%\"",
  "query_toks":[
   "select",
   "contestant_name",
   "from",
   "contestants",
   "where",
   "contestant_name",
   "like",
   "\"%al%\""
  ],
  "query_toks_no_value":[
   "select",
   "contestant_name",
   "from",
   "contestants",
   "where",
   "contestant_name",
   "like",
   "value"
  ],
  "question":"Return the names of the contestants whose names contain the substring 'Al' .",
  "question_toks":[
   "Return",
   "the",
   "names",
   "of",
   "the",
   "contestants",
   "whose",
   "names",
   "contain",
   "the",
   "substring",
   "'Al'",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        4,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     9,
     [
      0,
      [
       0,
       4,
       false
      ],
      null
     ],
     "\"%al%\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
  "query_toks":[
   "SELECT",
   "max",
   "(",
   "SHARE",
   ")",
   ",",
   "min",
   "(",
   "SHARE",
   ")",
   "FROM",
   "TV_series",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "max",
   "(",
   "share",
   ")",
   ",",
   "min",
   "(",
   "share",
   ")",
   "from",
   "tv_series"
  ],
  "question":"What is minimum and maximum share of TV series?",
  "question_toks":[
   "What",
   "is",
   "minimum",
   "and",
   "maximum",
   "share",
   "of",
   "TV",
   "series",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      1,
      [
       0,
       [
        0,
        14,
        false
       ],
       null
      ]
     ],
     [
      2,
      [
       0,
       [
        0,
        14,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"poker_player",
  "query":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T1.Birth_Date",
   "FROM",
   "people",
   "AS",
   "T1",
   "JOIN",
   "poker_player",
   "AS",
   "T2",
   "ON",
   "T1.People_ID",
   "=",
   "T2.People_ID",
   "ORDER",
   "BY",
   "T2.Earnings",
   "ASC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "birth_date",
   "from",
   "people",
   "as",
   "t1",
   "join",
   "poker_player",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "people_id",
   "=",
   "t2",
   ".",
   "people_id",
   "order",
   "by",
   "t2",
   ".",
   "earnings",
   "asc",
   "limit",
   "value"
  ],
  "question":"Return the birth date of the poker player with the lowest earnings.",
  "question_toks":[
   "Return",
   "the",
   "birth",
   "date",
   "of",
   "the",
   "poker",
   "player",
   "with",
   "the",
   "lowest",
   "earnings",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      0
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ],
      [
       0,
       2,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       6,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"car_1",
  "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
  "query_toks":[
   "SELECT",
   "DISTINCT",
   "T1.model",
   "FROM",
   "MODEL_LIST",
   "AS",
   "T1",
   "JOIN",
   "CAR_NAMES",
   "AS",
   "T2",
   "ON",
   "T1.Model",
   "=",
   "T2.Model",
   "JOIN",
   "CARS_DATA",
   "AS",
   "T3",
   "ON",
   "T2.MakeId",
   "=",
   "T3.Id",
   "JOIN",
   "CAR_MAKERS",
   "AS",
   "T4",
   "ON",
   "T1.Maker",
   "=",
   "T4.Id",
   "WHERE",
   "T3.weight",
   "<",
   "3500",
   "AND",
   "T4.FullName",
   "!",
   "=",
   "'Ford",
   "Motor",
   "Company",
   "'",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "distinct",
   "t1",
   ".",
   "model",
   "from",
   "model_list",
   "as",
   "t1",
   "join",
   "car_names",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "model",
   "=",
   "t2",
   ".",
   "model",
   "join",
   "cars_data",
   "as",
   "t3",
   "on",
   "t2",
   ".",
   "makeid",
   "=",
   "t3",
   ".",
   "id",
   "join",
   "car_makers",
   "as",
   "t4",
   "on",
   "t1",
   ".",
   "maker",
   "=",
   "t4",
   ".",
   "id",
   "where",
   "t3",
   ".",
   "weight",
   "<",
   "value",
   "and",
   "t4",
   ".",
   "fullname",
   "!",
   "=",
   "value"
  ],
  "question":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
  "question_toks":[
   "What",
   "are",
   "the",
   "different",
   "models",
   "wthat",
   "are",
   "lighter",
   "than",
   "3500",
   "but",
   "were",
   "not",
   "built",
   "by",
   "the",
   "Ford",
   "Motor",
   "Company",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      4
     ],
     [
      "table_unit",
      5
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ],
      [
       0,
       14,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        13,
        false
       ],
       null
      ],
      [
       0,
       16,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ],
      [
       0,
       6,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    true,
    [
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     4,
     [
      0,
      [
       0,
       21,
       false
      ],
      null
     ],
     3500.0,
     null
    ],
    "and",
    [
     false,
     7,
     [
      0,
      [
       0,
       8,
       false
      ],
      null
     ],
     "\"Ford Motor Company\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT document_id ,  document_name ,  document_description FROM Documents",
  "query_toks":[
   "SELECT",
   "document_id",
   ",",
   "document_name",
   ",",
   "document_description",
   "FROM",
   "Documents"
  ],
  "query_toks_no_value":[
   "select",
   "document_id",
   ",",
   "document_name",
   ",",
   "document_description",
   "from",
   "documents"
  ],
  "question":"List document IDs, document names, and document descriptions for all documents.",
  "question_toks":[
   "List",
   "document",
   "IDs",
   ",",
   "document",
   "names",
   ",",
   "and",
   "document",
   "descriptions",
   "for",
   "all",
   "documents",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
  "query_toks":[
   "SELECT",
   "COUNT",
   "(",
   "T2.Language",
   ")",
   ",",
   "T1.Name",
   "FROM",
   "country",
   "AS",
   "T1",
   "JOIN",
   "countrylanguage",
   "AS",
   "T2",
   "ON",
   "T1.Code",
   "=",
   "T2.CountryCode",
   "GROUP",
   "BY",
   "T1.Name",
   "HAVING",
   "COUNT",
   "(",
   "*",
   ")",
   ">",
   "2"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "t2",
   ".",
   "language",
   ")",
   ",",
   "t1",
   ".",
   "name",
   "from",
   "country",
   "as",
   "t1",
   "join",
   "countrylanguage",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "code",
   "=",
   "t2",
   ".",
   "countrycode",
   "group",
   "by",
   "t1",
   ".",
   "name",
   "having",
   "count",
   "(",
   "*",
   ")",
   ">",
   "value"
  ],
  "question":"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "countries",
   "that",
   "speak",
   "more",
   "than",
   "2",
   "languages",
   ",",
   "as",
   "well",
   "as",
   "how",
   "many",
   "languages",
   "they",
   "speak",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ],
     [
      "table_unit",
      3
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        8,
        false
       ],
       null
      ],
      [
       0,
       23,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        24,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     9,
     false
    ]
   ],
   "having":[
    [
     false,
     3,
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ],
     2.0,
     null
    ]
   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
  "query_toks":[
   "SELECT",
   "T2.Episode",
   "FROM",
   "TV_Channel",
   "AS",
   "T1",
   "JOIN",
   "TV_series",
   "AS",
   "T2",
   "ON",
   "T1.id",
   "=",
   "T2.Channel",
   "WHERE",
   "T1.series_name",
   "=",
   "``",
   "Sky",
   "Radio",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "episode",
   "from",
   "tv_channel",
   "as",
   "t1",
   "join",
   "tv_series",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "id",
   "=",
   "t2",
   ".",
   "channel",
   "where",
   "t1",
   ".",
   "series_name",
   "=",
   "value"
  ],
  "question":"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
  "question_toks":[
   "List",
   "the",
   "Episode",
   "of",
   "all",
   "TV",
   "series",
   "showed",
   "on",
   "TV",
   "Channel",
   "with",
   "series",
   "name",
   "``",
   "Sky",
   "Radio",
   "''",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       18,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        11,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       2,
       false
      ],
      null
     ],
     "\"Sky Radio\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"singer",
  "query":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
  "query_toks":[
   "SELECT",
   "T1.Name",
   ",",
   "sum",
   "(",
   "T2.Sales",
   ")",
   "FROM",
   "singer",
   "AS",
   "T1",
   "JOIN",
   "song",
   "AS",
   "T2",
   "ON",
   "T1.Singer_ID",
   "=",
   "T2.Singer_ID",
   "GROUP",
   "BY",
   "T1.Name"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "name",
   ",",
   "sum",
   "(",
   "t2",
   ".",
   "sales",
   ")",
   "from",
   "singer",
   "as",
   "t1",
   "join",
   "song",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "singer_id",
   "=",
   "t2",
   ".",
   "singer_id",
   "group",
   "by",
   "t1",
   ".",
   "name"
  ],
  "question":"Show the names of singers and the total sales of their songs.",
  "question_toks":[
   "Show",
   "the",
   "names",
   "of",
   "singers",
   "and",
   "the",
   "total",
   "sales",
   "of",
   "their",
   "songs",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ],
     [
      "table_unit",
      1
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        1,
        false
       ],
       null
      ],
      [
       0,
       8,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        2,
        false
       ],
       null
      ]
     ],
     [
      4,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     2,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
  "query_toks":[
   "SELECT",
   "document_id",
   ",",
   "template_id",
   ",",
   "Document_Description",
   "FROM",
   "Documents",
   "WHERE",
   "document_name",
   "=",
   "``",
   "Robbin",
   "CV",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "document_id",
   ",",
   "template_id",
   ",",
   "document_description",
   "from",
   "documents",
   "where",
   "document_name",
   "=",
   "value"
  ],
  "question":"What is the document id, template id and description for document named \"Robbin CV\"?",
  "question_toks":[
   "What",
   "is",
   "the",
   "document",
   "id",
   ",",
   "template",
   "id",
   "and",
   "description",
   "for",
   "document",
   "named",
   "``",
   "Robbin",
   "CV",
   "''",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        10,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        12,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       11,
       false
      ],
      null
     ],
     "\"Robbin CV\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
  "query_toks":[
   "SELECT",
   "count",
   "(",
   "*",
   ")",
   "FROM",
   "Templates",
   "WHERE",
   "template_type_code",
   "=",
   "``",
   "CV",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "count",
   "(",
   "*",
   ")",
   "from",
   "templates",
   "where",
   "template_type_code",
   "=",
   "value"
  ],
  "question":"Count the number of templates of the type CV.",
  "question_toks":[
   "Count",
   "the",
   "number",
   "of",
   "templates",
   "of",
   "the",
   "type",
   "CV",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      3,
      [
       0,
       [
        0,
        0,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"CV\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"student_transcripts_tracking",
  "query":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
  "query_toks":[
   "SELECT",
   "T1.semester_name",
   ",",
   "T1.semester_id",
   "FROM",
   "Semesters",
   "AS",
   "T1",
   "JOIN",
   "Student_Enrolment",
   "AS",
   "T2",
   "ON",
   "T1.semester_id",
   "=",
   "T2.semester_id",
   "GROUP",
   "BY",
   "T1.semester_id",
   "ORDER",
   "BY",
   "count",
   "(",
   "*",
   ")",
   "DESC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "t1",
   ".",
   "semester_name",
   ",",
   "t1",
   ".",
   "semester_id",
   "from",
   "semesters",
   "as",
   "t1",
   "join",
   "student_enrolment",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "semester_id",
   "=",
   "t2",
   ".",
   "semester_id",
   "group",
   "by",
   "t1",
   ".",
   "semester_id",
   "order",
   "by",
   "count",
   "(",
   "*",
   ")",
   "desc",
   "limit",
   "value"
  ],
  "question":"For each semester, what is the name and id of the one with the most students registered?",
  "question_toks":[
   "For",
   "each",
   "semester",
   ",",
   "what",
   "is",
   "the",
   "name",
   "and",
   "id",
   "of",
   "the",
   "one",
   "with",
   "the",
   "most",
   "students",
   "registered",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      5
     ],
     [
      "table_unit",
      7
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        28,
        false
       ],
       null
      ],
      [
       0,
       46,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        29,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        28,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     28,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[
    "desc",
    [
     [
      0,
      [
       3,
       0,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"flight_2",
  "query":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
  "query_toks":[
   "SELECT",
   "AirportName",
   "FROM",
   "AIRPORTS",
   "WHERE",
   "City",
   "=",
   "``",
   "Aberdeen",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "airportname",
   "from",
   "airports",
   "where",
   "city",
   "=",
   "value"
  ],
  "question":"What are airport names at City 'Aberdeen'?",
  "question_toks":[
   "What",
   "are",
   "airport",
   "names",
   "at",
   "City",
   "'Aberdeen",
   "'",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"Aberdeen\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"course_teach",
  "query":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
  "query_toks":[
   "SELECT",
   "Hometown",
   "FROM",
   "teacher",
   "ORDER",
   "BY",
   "Age",
   "ASC",
   "LIMIT",
   "1"
  ],
  "query_toks_no_value":[
   "select",
   "hometown",
   "from",
   "teacher",
   "order",
   "by",
   "age",
   "asc",
   "limit",
   "value"
  ],
  "question":"Where is the youngest teacher from?",
  "question_toks":[
   "Where",
   "is",
   "the",
   "youngest",
   "teacher",
   "from",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        7,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[
    "asc",
    [
     [
      0,
      [
       0,
       6,
       false
      ],
      null
     ]
    ]
   ],
   "limit":1,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
  "query_toks":[
   "SELECT",
   "name",
   "FROM",
   "stadium",
   "EXCEPT",
   "SELECT",
   "T2.name",
   "FROM",
   "concert",
   "AS",
   "T1",
   "JOIN",
   "stadium",
   "AS",
   "T2",
   "ON",
   "T1.stadium_id",
   "=",
   "T2.stadium_id",
   "WHERE",
   "T1.year",
   "=",
   "2014"
  ],
  "query_toks_no_value":[
   "select",
   "name",
   "from",
   "stadium",
   "except",
   "select",
   "t2",
   ".",
   "name",
   "from",
   "concert",
   "as",
   "t1",
   "join",
   "stadium",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "stadium_id",
   "=",
   "t2",
   ".",
   "stadium_id",
   "where",
   "t1",
   ".",
   "year",
   "=",
   "value"
  ],
  "question":"What are the names of all stadiums that did not have a concert in 2014?",
  "question_toks":[
   "What",
   "are",
   "the",
   "names",
   "of",
   "all",
   "stadiums",
   "that",
   "did",
   "not",
   "have",
   "a",
   "concert",
   "in",
   "2014",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      0
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":{
    "from":{
     "table_units":[
      [
       "table_unit",
       2
      ],
      [
       "table_unit",
       0
      ]
     ],
     "conds":[
      [
       false,
       2,
       [
        0,
        [
         0,
         18,
         false
        ],
        null
       ],
       [
        0,
        1,
        false
       ],
       null
      ]
     ]
    },
    "select":[
     false,
     [
      [
       0,
       [
        0,
        [
         0,
         3,
         false
        ],
        null
       ]
      ]
     ]
    ],
    "where":[
     [
      false,
      2,
      [
       0,
       [
        0,
        19,
        false
       ],
       null
      ],
      2014.0,
      null
     ]
    ],
    "groupBy":[

    ],
    "having":[

    ],
    "orderBy":[

    ],
    "limit":null,
    "intersect":null,
    "union":null,
    "except":null
   }
  }
 },
 {
  "db_id":"cre_Doc_Template_Mgt",
  "query":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
  "query_toks":[
   "SELECT",
   "template_id",
   "FROM",
   "Templates",
   "WHERE",
   "template_type_code",
   "=",
   "``",
   "PP",
   "''",
   "OR",
   "template_type_code",
   "=",
   "``",
   "PPT",
   "''"
  ],
  "query_toks_no_value":[
   "select",
   "template_id",
   "from",
   "templates",
   "where",
   "template_type_code",
   "=",
   "value",
   "or",
   "template_type_code",
   "=",
   "value"
  ],
  "question":"What are the ids of templates with template type code PP or PPT?",
  "question_toks":[
   "What",
   "are",
   "the",
   "ids",
   "of",
   "templates",
   "with",
   "template",
   "type",
   "code",
   "PP",
   "or",
   "PPT",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      1
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        3,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"PP\"",
     null
    ],
    "or",
    [
     false,
     2,
     [
      0,
      [
       0,
       5,
       false
      ],
      null
     ],
     "\"PPT\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"world_1",
  "query":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
  "query_toks":[
   "SELECT",
   "LANGUAGE",
   ",",
   "CountryCode",
   ",",
   "max",
   "(",
   "Percentage",
   ")",
   "FROM",
   "countrylanguage",
   "GROUP",
   "BY",
   "CountryCode"
  ],
  "query_toks_no_value":[
   "select",
   "language",
   ",",
   "countrycode",
   ",",
   "max",
   "(",
   "percentage",
   ")",
   "from",
   "countrylanguage",
   "group",
   "by",
   "countrycode"
  ],
  "question":"What is the language spoken by the largest percentage of people in each country?",
  "question_toks":[
   "What",
   "is",
   "the",
   "language",
   "spoken",
   "by",
   "the",
   "largest",
   "percentage",
   "of",
   "people",
   "in",
   "each",
   "country",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        24,
        false
       ],
       null
      ]
     ],
     [
      0,
      [
       0,
       [
        0,
        23,
        false
       ],
       null
      ]
     ],
     [
      1,
      [
       0,
       [
        0,
        26,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[

   ],
   "groupBy":[
    [
     0,
     23,
     false
    ]
   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"student_transcripts_tracking",
  "query":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
  "query_toks":[
   "SELECT",
   "section_description",
   "FROM",
   "Sections",
   "WHERE",
   "section_name",
   "=",
   "'h",
   "'"
  ],
  "query_toks_no_value":[
   "select",
   "section_description",
   "from",
   "sections",
   "where",
   "section_name",
   "=",
   "value"
  ],
  "question":"What is the description for the section named h?",
  "question_toks":[
   "What",
   "is",
   "the",
   "description",
   "for",
   "the",
   "section",
   "named",
   "h",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      4
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        26,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       25,
       false
      ],
      null
     ],
     "\"h\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"concert_singer",
  "query":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
  "query_toks":[
   "SELECT",
   "T2.name",
   "FROM",
   "singer_in_concert",
   "AS",
   "T1",
   "JOIN",
   "singer",
   "AS",
   "T2",
   "ON",
   "T1.singer_id",
   "=",
   "T2.singer_id",
   "JOIN",
   "concert",
   "AS",
   "T3",
   "ON",
   "T1.concert_id",
   "=",
   "T3.concert_id",
   "WHERE",
   "T3.year",
   "=",
   "2014"
  ],
  "query_toks_no_value":[
   "select",
   "t2",
   ".",
   "name",
   "from",
   "singer_in_concert",
   "as",
   "t1",
   "join",
   "singer",
   "as",
   "t2",
   "on",
   "t1",
   ".",
   "singer_id",
   "=",
   "t2",
   ".",
   "singer_id",
   "join",
   "concert",
   "as",
   "t3",
   "on",
   "t1",
   ".",
   "concert_id",
   "=",
   "t3",
   ".",
   "concert_id",
   "where",
   "t3",
   ".",
   "year",
   "=",
   "value"
  ],
  "question":"List all singer names in concerts in year 2014.",
  "question_toks":[
   "List",
   "all",
   "singer",
   "names",
   "in",
   "concerts",
   "in",
   "year",
   "2014",
   "."
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      3
     ],
     [
      "table_unit",
      1
     ],
     [
      "table_unit",
      2
     ]
    ],
    "conds":[
     [
      false,
      2,
      [
       0,
       [
        0,
        21,
        false
       ],
       null
      ],
      [
       0,
       8,
       false
      ],
      null
     ],
     "and",
     [
      false,
      2,
      [
       0,
       [
        0,
        20,
        false
       ],
       null
      ],
      [
       0,
       15,
       false
      ],
      null
     ]
    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        9,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       19,
       false
      ],
      null
     ],
     2014.0,
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 },
 {
  "db_id":"tvshow",
  "query":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
  "query_toks":[
   "SELECT",
   "Title",
   "FROM",
   "Cartoon",
   "WHERE",
   "Directed_by",
   "=",
   "``",
   "Ben",
   "Jones",
   "''",
   "OR",
   "Directed_by",
   "=",
   "``",
   "Brandon",
   "Vietti",
   "''",
   ";"
  ],
  "query_toks_no_value":[
   "select",
   "title",
   "from",
   "cartoon",
   "where",
   "directed_by",
   "=",
   "value",
   "or",
   "directed_by",
   "=",
   "value"
  ],
  "question":"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
  "question_toks":[
   "What",
   "are",
   "the",
   "titles",
   "of",
   "all",
   "cartoons",
   "directed",
   "by",
   "Ben",
   "Jones",
   "or",
   "Brandon",
   "Vietti",
   "?"
  ],
  "sql":{
   "from":{
    "table_units":[
     [
      "table_unit",
      2
     ]
    ],
    "conds":[

    ]
   },
   "select":[
    false,
    [
     [
      0,
      [
       0,
       [
        0,
        20,
        false
       ],
       null
      ]
     ]
    ]
   ],
   "where":[
    [
     false,
     2,
     [
      0,
      [
       0,
       21,
       false
      ],
      null
     ],
     "\"Ben Jones\"",
     null
    ],
    "or",
    [
     false,
     2,
     [
      0,
      [
       0,
       21,
       false
      ],
      null
     ],
     "\"Brandon Vietti\"",
     null
    ]
   ],
   "groupBy":[

   ],
   "having":[

   ],
   "orderBy":[

   ],
   "limit":null,
   "intersect":null,
   "union":null,
   "except":null
  }
 }
]